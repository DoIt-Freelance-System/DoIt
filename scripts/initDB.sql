DROP TABLE if EXISTS TEAMS;
DROP TABLE if EXISTS USER_SKILLS;
DROP TABLE if EXISTS SKILLS;
DROP TABLE if EXISTS PAYMENTS;
DROP TABLE if EXISTS FEEDBACKS;
DROP TABLE if EXISTS ATTACHMENTS;
DROP TABLE if EXISTS MESSAGES;
DROP TABLE if EXISTS ORDERS;
DROP TABLE if EXISTS USERS;


CREATE TABLE SKILLS(
  skill_id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL
);

CREATE TABLE USERS(
  user_id SERIAL PRIMARY KEY,
  nickname VARCHAR(255),
  first_name VARCHAR(255) NOT NULL,
  last_name VARCHAR(255) NOT NULL,
  mail VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(255) NOT NULL,
  status VARCHAR(255) NOT NULL /* set default*/,
  registration_date TIMESTAMP DEFAULT current_timestamp,
  rating FLOAT DEFAULT 0.0 NOT NULL
);

CREATE TABLE ORDERS(
  order_id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  customer INT NOT NULL REFERENCES USERS,
  description TEXT NOT NULL,
  price DOUBLE PRECISION NOT NULL,
  date_of_creation TIMESTAMP DEFAULT current_timestamp,
  date_of_completion TIMESTAMP,
  order_type VARCHAR(255) NOT NULL,
  status VARCHAR(255) NOT NULL /* set default*/
);

CREATE TABLE MESSAGES(
  message_id SERIAL PRIMARY KEY,
  text_of_message TEXT NOT NULL,
  date_of_sending TIMESTAMP DEFAULT current_timestamp,
  message_sender INT NOT NULL REFERENCES USERS,
  message_recipient INT NOT NULL REFERENCES USERS,
  message_type VARCHAR(255) NOT NULL,
  message_status VARCHAR(255) NOT NULL /* set default*/
);

CREATE TABLE PAYMENTS(
  payment_id SERIAL PRIMARY KEY,
  payment_amount DOUBLE PRECISION NOT NULL,
  date_of_payment TIMESTAMP DEFAULT current_timestamp,
  order_id INT NOT NULL REFERENCES ORDERS,
  payment_status VARCHAR(255) NOT NULL /* set default*/
);

CREATE TABLE FEEDBACK(
  feedback_id SERIAL PRIMARY KEY,
  date_of_feedback TIMESTAMP DEFAULT current_timestamp,
  text_of_feedback TEXT NOT NULL,
  feedback_sender INT NOT NULL REFERENCES USERS,
  feedback_recipient INT REFERENCES USERS,
  order_id INT REFERENCES ORDERS
);

CREATE TABLE ATTACHMENTS(
  attachment_id SERIAL PRIMARY KEY,
  link VARCHAR(255) NOT NULL,
  message_id INT REFERENCES MESSAGES,
  order_id INT REFERENCES ORDERS
);

create table USER_SKILLS(
  user_id INT REFERENCES USERS,
  skill_id INT REFERENCES SKILLS
);

CREATE TABLE TEAMS (
  team_id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  user_id INT REFERENCES USERS,
  order_id INT REFERENCES ORDERS
);